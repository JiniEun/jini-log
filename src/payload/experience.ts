// payload/experience.ts
import {Experience} from "@/payload/types";

export const experiences: Experience[] = [
  {
    company: '롯데 e커머스(롯데ON)',
    companySummary: '롯데쇼핑 통합 e커머스 플랫폼',
    position: 'Product개발팀, 정직원',
    duration: '2022.12 - 재직중',
    description: [
      'MSA 기반의 이커머스 플랫폼에서 상품 상세 도메인을 담당하고 있으며,\nJava, Spring, MyBatis, MySQL, Elasticsearch, Redis, GitLab, Grafana 등 다양한 기술을 활용해 안정적이고 확장 가능한 서비스를 개발하고 있습니다.',
      '상품 상세 영역은 사용자가 실제로 상품을 이해하고 구매로 이어지는 핵심 접점이기 때문에,\n정확한 정보 전달, 빠른 응답 속도, 유연한 확장성 등을 고려한 시스템 설계를 목표로 하고 있습니다.',
      '기획 단계부터 적극적으로 참여하여 도메인 요구사항을 반영하고,\n타 부서와의 원활한 협업을 통해 프로덕트 완성도를 높이고 있습니다.',
      '개발 세미나, 코드 리뷰 문화를 통해, 기술적인 내용과 개발 프로세스에 대한 깊은 이해를 나누고 팀 전체의 기술 역량 향상과 건강한 개발 문화를 함께 만들어가고 있습니다.'
    ],
    location: '서울',
    projects: [
      {
        title: '마트몰 OSP 전환 대응',
        startDate: '2025.01',
        endDate: '2025.03',
        summary: '롯데마트가 롯데ON에서 이탈하며, 자체 몰(OSP)로 이전하게 된 이슈에 따라, 기존 롯데온 상품상세에서 노출되던 리뷰 및 관련 UI 영역을 자체 마트몰에 맞게 이관 및 수정하는 작업을 수행했습니다.',
        description: [
          '롯데마트 OSP 전환(S)에 대응하기 위해, 변경된 상품번호 체계에 맞춰 리뷰 데이터 이관 로직을 설계·개선(A)하여, 마이그레이션 오류 없이 데이터 일관성을 유지했습니다(R).',
          '기존 상품상세의 리뷰 노출 영역을 마트몰 환경에 맞게 리팩터링(A)하여, 페이지 정상 노출률 100%를 달성했습니다(R).',
        ],
        techStack: ['Java', 'SpringBoot', 'OpenSearch', 'Spring Batch']
      },
      {
        title: '상품 이미지, 기술서 실시간 처리 서버 내재화',
        startDate: '2024.06',
        endDate: '2024.12',
        summary: '상품 상세 페이지의 이미지 및 기술서 정보를 실시간으로 처리하는 서버를 내재화하여, 외부 의존성을 줄이고 안정성을 높였습니다.',
        description: [
          '외부 이미지 처리 솔루션 의존으로 인한 비용 및 지연 문제(S)를 해결하기 위해, AWS Lambda + S3 + CloudFront 기반 서버리스 이미지 변환 서버를 구축(A)하여 운영 비용을 60% 절감하고 응답 속도를 2배 향상시켰습니다(R).',
          'TypeScript 기반 비동기 처리 로직을 설계(A)해 실시간 기술서 변환 프로세스 안정성을 확보하고, 트래픽 급증 시에도 처리 지연 없이 대응했습니다(R).',
          'CloudWatch + Slack 연동을 통한 로깅·모니터링 체계를 수립(A)하여, 장애 감지·대응 시간을 5분 이내로 단축했습니다(R).',
        ],
        techStack: ['Node.js', 'Typescript', 'AWS Lambda', 'S3', 'CloudFront']
      },
      {
        title: '버티컬 UI/서버 개선 및 신규 서비스 대응과 운영 관리',
        startDate: '2023.04',
        endDate: '2023.08',
        summary: '버티컬 UI 및 서버 개선을 통해 신규 서비스에 대한 대응력을 높이고, 사용자 경험을 향상시켰습니다.',
        description: [
          '상품 상세 상단 구조가 버티컬 서비스별로 중복되어 유지보수 비용이 증가하는 문제(S)를 해결하기 위해, 공통 헤더 컴포넌트를 설계·적용(A)하여 신규 버티컬(온앤더뷰티/온앤더패션) 확장 시 개발 효율을 30% 향상시켰습니다(R).',
          'Vue.js 기반 상품 상세 상단 UI를 개편(A)하여, 온앤더뷰티 주간 유입수가 36%, 온앤더패션은 54% 증가하는 성과를 거두었습니다(R).',
        ],
        techStack: ['Java', 'Spring Boot', 'Mysql', 'AWS DynamoDB', 'Redis', 'Vue.js']
      },
      {
        title: 'API 모니터링 고도화를 위한 AOP 기반 로깅 개선',
        startDate: '2024.02',
        endDate: '2024.03',
        summary: 'AOP 기반 로깅 구조를 설계·구현하여, 운영 가시성을 높이고, 개발 효율성 향상에 기여했습니다.',
        description: [
          '운영 중 API 호출 로그가 일관되지 않아 사용 현황 파악이 어려운 문제(S)에 대응하기 위해, AOP 기반 로깅 구조를 설계·구현(A)하여 @Deprecated API 호출 기록을 자동 수집하고, 불필요 API 정리 기반을 마련했습니다(R).',
          '기존에 관리되지 않던 API 사용 통계를 체계화(A)하여, 호출 빈도 및 의존 관계를 시각적으로 파악하고, 서비스 정리 및 리팩터링 의사결정의 근거 데이터를 확보했습니다(R).',
          '와탭(Whatap) 연동을 통해 실시간 호출 통계를 대시보드로 시각화(A)함으로써, 장애 탐지 속도를 단축하고 운영 가시성을 높였습니다(R).',
          '어노테이션 기반의 AOP 설계를 도입(A)해 다양한 조건별 API 모니터링 확장성(R)을 확보하고, 향후 공통 로깅 모듈로 재사용 가능한 구조를 마련했습니다.',
        ],
        techStack: ['Java', 'Spring Boot']
      },
      {
        title: '리뷰/QnA 안정화 및 검색 성능 개선',
        startDate: '2023.02',
        endDate: '2023.12',
        summary: '리뷰 및 QnA 도메인 안정화 및 성능 개선을 통해 사용자 경험을 향상시켰습니다.',
        description: [
          'Elasticsearch 지연(S)을 해소하기 위해 쿼리 구조를 개선하고 서비스 단 파티셔닝 및 Tyk 캐싱을 적용(A)하여, 평균 검색 응답 속도를 단축했습니다(R).',
          'heic 확장자 이미지 미노출 이슈를 해결(A)하고 기존 등록 데이터에 대해 일괄 배치 처리를 수행하여, 미노출 비율을 0%로 안정화했습니다(R).',
          '상품과 무관한 스크린샷 등록 증가(S)에 대응해 제어 로직을 도입(A)하여, 신고 건수를 66% 감소시켰습니다(R).',
        ],
        techStack: ['Java', 'Spring Boot', 'Spring Batch', 'Elasticsearch', 'Vue.js']
      }
    ]
  },

];
